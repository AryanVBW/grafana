// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v0alpha1

// SubRouteApplyConfiguration represents a declarative configuration of the SubRoute type for use
// with apply.
type SubRouteApplyConfiguration struct {
	Continue          *bool                        `json:"continue,omitempty"`
	GroupBy           []string                     `json:"group_by,omitempty"`
	GroupInterval     *string                      `json:"group_interval,omitempty"`
	GroupWait         *string                      `json:"group_wait,omitempty"`
	Matchers          []MatcherApplyConfiguration  `json:"matchers,omitempty"`
	MuteTimeIntervals []string                     `json:"mute_time_intervals,omitempty"`
	Receiver          *string                      `json:"receiver,omitempty"`
	RepeatInterval    *string                      `json:"repeat_interval,omitempty"`
	Routes            []SubRouteApplyConfiguration `json:"routes,omitempty"`
}

// SubRouteApplyConfiguration constructs a declarative configuration of the SubRoute type for use with
// apply.
func SubRoute() *SubRouteApplyConfiguration {
	return &SubRouteApplyConfiguration{}
}

// WithContinue sets the Continue field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Continue field is set to the value of the last call.
func (b *SubRouteApplyConfiguration) WithContinue(value bool) *SubRouteApplyConfiguration {
	b.Continue = &value
	return b
}

// WithGroupBy adds the given value to the GroupBy field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the GroupBy field.
func (b *SubRouteApplyConfiguration) WithGroupBy(values ...string) *SubRouteApplyConfiguration {
	for i := range values {
		b.GroupBy = append(b.GroupBy, values[i])
	}
	return b
}

// WithGroupInterval sets the GroupInterval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GroupInterval field is set to the value of the last call.
func (b *SubRouteApplyConfiguration) WithGroupInterval(value string) *SubRouteApplyConfiguration {
	b.GroupInterval = &value
	return b
}

// WithGroupWait sets the GroupWait field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GroupWait field is set to the value of the last call.
func (b *SubRouteApplyConfiguration) WithGroupWait(value string) *SubRouteApplyConfiguration {
	b.GroupWait = &value
	return b
}

// WithMatchers adds the given value to the Matchers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Matchers field.
func (b *SubRouteApplyConfiguration) WithMatchers(values ...*MatcherApplyConfiguration) *SubRouteApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMatchers")
		}
		b.Matchers = append(b.Matchers, *values[i])
	}
	return b
}

// WithMuteTimeIntervals adds the given value to the MuteTimeIntervals field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MuteTimeIntervals field.
func (b *SubRouteApplyConfiguration) WithMuteTimeIntervals(values ...string) *SubRouteApplyConfiguration {
	for i := range values {
		b.MuteTimeIntervals = append(b.MuteTimeIntervals, values[i])
	}
	return b
}

// WithReceiver sets the Receiver field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Receiver field is set to the value of the last call.
func (b *SubRouteApplyConfiguration) WithReceiver(value string) *SubRouteApplyConfiguration {
	b.Receiver = &value
	return b
}

// WithRepeatInterval sets the RepeatInterval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RepeatInterval field is set to the value of the last call.
func (b *SubRouteApplyConfiguration) WithRepeatInterval(value string) *SubRouteApplyConfiguration {
	b.RepeatInterval = &value
	return b
}

// WithRoutes adds the given value to the Routes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Routes field.
func (b *SubRouteApplyConfiguration) WithRoutes(values ...*SubRouteApplyConfiguration) *SubRouteApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRoutes")
		}
		b.Routes = append(b.Routes, *values[i])
	}
	return b
}
